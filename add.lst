     1                                  %include "io.mac"
     1                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     2                              <1> extern   proc_GetStr, proc_GetCh
     3                              <1> extern   proc_PutInt, proc_GetInt
     4                              <1> extern   proc_PutLInt, proc_GetLInt
     5                              <1> 
     6                              <1> ;;-------------------------------------------------------------------
     7                              <1> %macro  .STARTUP  0
     8                              <1> ;group dgroup .data .bss
     9                              <1>         global   _start
    10                              <1> _start:
    11                              <1> %endmacro
    12                              <1> ;;-------------------------------------------------------------------
    13                              <1> 
    14                              <1> 
    15                              <1> ;;-------------------------------------------------------------------
    16                              <1> %macro  .EXIT  0
    17                              <1>         mov    EAX,1
    18                              <1>         xor    EBX,EBX
    19                              <1>         int    0x80
    20                              <1> %endmacro
    21                              <1> ;;-------------------------------------------------------------------
    22                              <1> 
    23                              <1> 
    24                              <1> ;;-------------------------------------------------------------------
    25                              <1> %macro  .DATA 0
    26                              <1>         segment .data
    27                              <1> %endmacro
    28                              <1> ;;-------------------------------------------------------------------
    29                              <1> 
    30                              <1> ;;-------------------------------------------------------------------
    31                              <1> %macro  .UDATA 0
    32                              <1>         segment .bss
    33                              <1> %endmacro
    34                              <1> ;;-------------------------------------------------------------------
    35                              <1> 
    36                              <1> ;;-------------------------------------------------------------------
    37                              <1> %macro  .CODE 0
    38                              <1>         segment .data
    39                              <1>         segment .bss
    40                              <1>         segment .text
    41                              <1> %endmacro
    42                              <1> ;;-------------------------------------------------------------------
    43                              <1> 
    44                              <1> 
    45                              <1> ;;-------------------------------------------------------------------
    46                              <1> %macro  nwln  0 
    47                              <1>         call    proc_nwln
    48                              <1> %endmacro
    49                              <1> ;;-------------------------------------------------------------------
    50                              <1> 
    51                              <1> 
    52                              <1> ;;-------------------------------------------------------------------
    53                              <1> %macro  PutCh  1 
    54                              <1>         push    AX
    55                              <1>         mov     AL,%1
    56                              <1>         call    proc_PutCh
    57                              <1>         pop     AX
    58                              <1> %endmacro
    59                              <1> ;;-------------------------------------------------------------------
    60                              <1> 
    61                              <1> 
    62                              <1> ;;-------------------------------------------------------------------
    63                              <1> %macro  PutStr  1 
    64                              <1>         push    ECX
    65                              <1>         mov     ECX,%1
    66                              <1>         call    proc_PutStr
    67                              <1>         pop     ECX
    68                              <1> %endmacro
    69                              <1> ;;-------------------------------------------------------------------
    70                              <1> 
    71                              <1> 
    72                              <1> ;;-------------------------------------------------------------------
    73                              <1> %macro  GetStr  1-2 81
    74                              <1>         push    ESI
    75                              <1>         push    EDI
    76                              <1>         mov     EDI,%1
    77                              <1>         mov     ESI,%2
    78                              <1>         call    proc_GetStr
    79                              <1>         pop     EDI
    80                              <1>         pop     ESI
    81                              <1> %endmacro
    82                              <1> ;;-------------------------------------------------------------------
    83                              <1> 
    84                              <1> 
    85                              <1> ;;-------------------------------------------------------------------
    86                              <1> %macro  GetCh   1
    87                              <1>         push    SI
    88                              <1>         xor     SI,SI
    89                              <1> %ifidni %1,AL
    90                              <1>         ;inc     SI
    91                              <1>         call    proc_GetCh
    92                              <1> %elifidni %1,AH
    93                              <1>         mov     SI,1
    94                              <1>         call    proc_GetCh
    95                              <1> %else
    96                              <1>         push    AX
    97                              <1>         call    proc_GetCh
    98                              <1>         mov     %1,AL
    99                              <1>         pop     AX
   100                              <1> %endif
   101                              <1>         pop     SI
   102                              <1> %endmacro
   103                              <1> ;;-------------------------------------------------------------------
   104                              <1> 
   105                              <1> 
   106                              <1> ;;-------------------------------------------------------------------
   107                              <1> %macro  PutInt  1
   108                              <1>         push    AX
   109                              <1>         mov     AX,%1
   110                              <1>         call    proc_PutInt
   111                              <1>         pop     AX
   112                              <1> %endmacro
   113                              <1> ;;-------------------------------------------------------------------
   114                              <1> 
   115                              <1> 
   116                              <1> ;;-------------------------------------------------------------------
   117                              <1> %macro  GetInt  1
   118                              <1> %ifnidni %1,AX
   119                              <1>         push    AX
   120                              <1>         call    proc_GetInt
   121                              <1>         mov     %1,AX
   122                              <1> 	  pop     AX
   123                              <1> %else 
   124                              <1>         call  proc_GetInt
   125                              <1> %endif
   126                              <1> %endmacro
   127                              <1> ;;-------------------------------------------------------------------
   128                              <1> 
   129                              <1> ;;-------------------------------------------------------------------
   130                              <1> %macro  PutLInt  1
   131                              <1>         push    EAX
   132                              <1>         mov     EAX,%1
   133                              <1>         call    proc_PutLInt
   134                              <1>         pop     EAX
   135                              <1> %endmacro
   136                              <1> ;;-------------------------------------------------------------------
   137                              <1> 
   138                              <1> ;;-------------------------------------------------------------------
   139                              <1> %macro  GetLInt  1
   140                              <1> %ifnidni %1,EAX
   141                              <1>         push    EAX
   142                              <1>         call    proc_GetLInt
   143                              <1>         mov     %1,EAX
   144                              <1> 	  pop     EAX
   145                              <1> %else 
   146                              <1>         call  proc_GetLInt
   147                              <1> %endif
   148                              <1> %endmacro
   149                              <1> ;;-------------------------------------------------------------------
   150                              <1> 
     2                                  
     3                                  .DATA
     3                              <1>  segment .data
     4 00000000 456E74657220746865-       prompt1_msg db 'Enter the first number: ',0
     4 00000009 206669727374206E75-
     4 00000012 6D6265723A2000     
     5 00000019 456E74657220746865-       prompt2_msg db 'Enter the second number: ',0
     5 00000022 207365636F6E64206E-
     5 0000002B 756D6265723A2000   
     6 00000033 53756D2069733A2000        sum_msg db 'Sum is: ',0
     7 0000003C 4F766572666C6F7720-       error_msg db 'Overflow has occurred!!',0
     7 00000045 686173206F63637572-
     7 0000004E 726564212100       
     8                                  
     9                                  .UDATA
     9                              <1>  segment .bss
    10                                  
    11 00000000 <res 00000004>            number1 resd 1
    12 00000004 <res 00000004>            number2 resd 1
    13 00000008 <res 00000004>            sum resd 1
    14                                  
    15                                  .CODE
    15                              <1>  segment .data
    15                              <1>  segment .bss
    15                              <1>  segment .text
    16                                  
    17                                    .STARTUP
    17                              <1> 
    17                              <1>  global _start
    17                              <1> _start:
    18                                  
    19                                    PutStr prompt1_msg
    19 00000000 51                  <1>  push ECX
    19 00000001 B9[00000000]        <1>  mov ECX,%1
    19 00000006 E8(00000000)        <1>  call proc_PutStr
    19 0000000B 59                  <1>  pop ECX
    20                                    GetLInt [number1]
    20                              <1> %ifnidni %1,EAX
    20 0000000C 50                  <1>  push EAX
    20 0000000D E8(00000000)        <1>  call proc_GetLInt
    20 00000012 A3[00000000]        <1>  mov %1,EAX
    20 00000017 58                  <1>  pop EAX
    20                              <1> %else
    20                              <1>  call proc_GetLInt
    20                              <1> %endif
    21                                  
    22                                    PutStr prompt2_msg
    22 00000018 51                  <1>  push ECX
    22 00000019 B9[19000000]        <1>  mov ECX,%1
    22 0000001E E8(00000000)        <1>  call proc_PutStr
    22 00000023 59                  <1>  pop ECX
    23                                    GetLInt [number2]
    23                              <1> %ifnidni %1,EAX
    23 00000024 50                  <1>  push EAX
    23 00000025 E8(00000000)        <1>  call proc_GetLInt
    23 0000002A A3[04000000]        <1>  mov %1,EAX
    23 0000002F 58                  <1>  pop EAX
    23                              <1> %else
    23                              <1>  call proc_GetLInt
    23                              <1> %endif
    24                                  
    25 00000030 A1[00000000]              mov EAX,[number1]
    26 00000035 0305[04000000]            add EAX,[number2]
    27 0000003B A3[08000000]              mov [sum],EAX
    28                                  
    29 00000040 7113                      jno no_overflow
    30                                    PutStr error_msg
    30 00000042 51                  <1>  push ECX
    30 00000043 B9[3C000000]        <1>  mov ECX,%1
    30 00000048 E8(00000000)        <1>  call proc_PutStr
    30 0000004D 59                  <1>  pop ECX
    31                                    nwln
    31 0000004E E8(00000000)        <1>  call proc_nwln
    32 00000053 EB1D                      jmp done
    33                                  
    34                                    no_overflow:
    35                                      PutStr sum_msg
    35 00000055 51                  <1>  push ECX
    35 00000056 B9[33000000]        <1>  mov ECX,%1
    35 0000005B E8(00000000)        <1>  call proc_PutStr
    35 00000060 59                  <1>  pop ECX
    36                                      PutLInt [sum]
    36 00000061 50                  <1>  push EAX
    36 00000062 A1[08000000]        <1>  mov EAX,%1
    36 00000067 E8(00000000)        <1>  call proc_PutLInt
    36 0000006C 58                  <1>  pop EAX
    37                                      nwln
    37 0000006D E8(00000000)        <1>  call proc_nwln
    38                                    done:
    39                                      .EXIT
    39 00000072 B801000000          <1>  mov EAX,1
    39 00000077 31DB                <1>  xor EBX,EBX
    39 00000079 CD80                <1>  int 0x80
