     1                                  %include "io.mac"
     1                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     2                              <1> extern   proc_GetStr, proc_GetCh
     3                              <1> extern   proc_PutInt, proc_GetInt
     4                              <1> extern   proc_PutLInt, proc_GetLInt
     5                              <1> 
     6                              <1> ;;-------------------------------------------------------------------
     7                              <1> %macro  .STARTUP  0
     8                              <1> ;group dgroup .data .bss
     9                              <1>         global   _start
    10                              <1> _start:
    11                              <1> %endmacro
    12                              <1> ;;-------------------------------------------------------------------
    13                              <1> 
    14                              <1> 
    15                              <1> ;;-------------------------------------------------------------------
    16                              <1> %macro  .EXIT  0
    17                              <1>         mov    EAX,1
    18                              <1>         xor    EBX,EBX
    19                              <1>         int    0x80
    20                              <1> %endmacro
    21                              <1> ;;-------------------------------------------------------------------
    22                              <1> 
    23                              <1> 
    24                              <1> ;;-------------------------------------------------------------------
    25                              <1> %macro  .DATA 0
    26                              <1>         segment .data
    27                              <1> %endmacro
    28                              <1> ;;-------------------------------------------------------------------
    29                              <1> 
    30                              <1> ;;-------------------------------------------------------------------
    31                              <1> %macro  .UDATA 0
    32                              <1>         segment .bss
    33                              <1> %endmacro
    34                              <1> ;;-------------------------------------------------------------------
    35                              <1> 
    36                              <1> ;;-------------------------------------------------------------------
    37                              <1> %macro  .CODE 0
    38                              <1>         segment .data
    39                              <1>         segment .bss
    40                              <1>         segment .text
    41                              <1> %endmacro
    42                              <1> ;;-------------------------------------------------------------------
    43                              <1> 
    44                              <1> 
    45                              <1> ;;-------------------------------------------------------------------
    46                              <1> %macro  nwln  0 
    47                              <1>         call    proc_nwln
    48                              <1> %endmacro
    49                              <1> ;;-------------------------------------------------------------------
    50                              <1> 
    51                              <1> 
    52                              <1> ;;-------------------------------------------------------------------
    53                              <1> %macro  PutCh  1 
    54                              <1>         push    AX
    55                              <1>         mov     AL,%1
    56                              <1>         call    proc_PutCh
    57                              <1>         pop     AX
    58                              <1> %endmacro
    59                              <1> ;;-------------------------------------------------------------------
    60                              <1> 
    61                              <1> 
    62                              <1> ;;-------------------------------------------------------------------
    63                              <1> %macro  PutStr  1 
    64                              <1>         push    ECX
    65                              <1>         mov     ECX,%1
    66                              <1>         call    proc_PutStr
    67                              <1>         pop     ECX
    68                              <1> %endmacro
    69                              <1> ;;-------------------------------------------------------------------
    70                              <1> 
    71                              <1> 
    72                              <1> ;;-------------------------------------------------------------------
    73                              <1> %macro  GetStr  1-2 81
    74                              <1>         push    ESI
    75                              <1>         push    EDI
    76                              <1>         mov     EDI,%1
    77                              <1>         mov     ESI,%2
    78                              <1>         call    proc_GetStr
    79                              <1>         pop     EDI
    80                              <1>         pop     ESI
    81                              <1> %endmacro
    82                              <1> ;;-------------------------------------------------------------------
    83                              <1> 
    84                              <1> 
    85                              <1> ;;-------------------------------------------------------------------
    86                              <1> %macro  GetCh   1
    87                              <1>         push    SI
    88                              <1>         xor     SI,SI
    89                              <1> %ifidni %1,AL
    90                              <1>         ;inc     SI
    91                              <1>         call    proc_GetCh
    92                              <1> %elifidni %1,AH
    93                              <1>         mov     SI,1
    94                              <1>         call    proc_GetCh
    95                              <1> %else
    96                              <1>         push    AX
    97                              <1>         call    proc_GetCh
    98                              <1>         mov     %1,AL
    99                              <1>         pop     AX
   100                              <1> %endif
   101                              <1>         pop     SI
   102                              <1> %endmacro
   103                              <1> ;;-------------------------------------------------------------------
   104                              <1> 
   105                              <1> 
   106                              <1> ;;-------------------------------------------------------------------
   107                              <1> %macro  PutInt  1
   108                              <1>         push    AX
   109                              <1>         mov     AX,%1
   110                              <1>         call    proc_PutInt
   111                              <1>         pop     AX
   112                              <1> %endmacro
   113                              <1> ;;-------------------------------------------------------------------
   114                              <1> 
   115                              <1> 
   116                              <1> ;;-------------------------------------------------------------------
   117                              <1> %macro  GetInt  1
   118                              <1> %ifnidni %1,AX
   119                              <1>         push    AX
   120                              <1>         call    proc_GetInt
   121                              <1>         mov     %1,AX
   122                              <1> 	  pop     AX
   123                              <1> %else 
   124                              <1>         call  proc_GetInt
   125                              <1> %endif
   126                              <1> %endmacro
   127                              <1> ;;-------------------------------------------------------------------
   128                              <1> 
   129                              <1> ;;-------------------------------------------------------------------
   130                              <1> %macro  PutLInt  1
   131                              <1>         push    EAX
   132                              <1>         mov     EAX,%1
   133                              <1>         call    proc_PutLInt
   134                              <1>         pop     EAX
   135                              <1> %endmacro
   136                              <1> ;;-------------------------------------------------------------------
   137                              <1> 
   138                              <1> ;;-------------------------------------------------------------------
   139                              <1> %macro  GetLInt  1
   140                              <1> %ifnidni %1,EAX
   141                              <1>         push    EAX
   142                              <1>         call    proc_GetLInt
   143                              <1>         mov     %1,EAX
   144                              <1> 	  pop     EAX
   145                              <1> %else 
   146                              <1>         call  proc_GetLInt
   147                              <1> %endif
   148                              <1> %endmacro
   149                              <1> ;;-------------------------------------------------------------------
   150                              <1> 
     2                                  
     3                                  .DATA
     3                              <1>  segment .data
     4 00000000 504C6561736520656E-     name_msg db 'PLease enter your name:  ',0
     4 00000009 74657220796F757220-
     4 00000012 6E616D653A202000   
     5 0000001A 486F77206D616E7920-     query_msg db 'How many times to repeat welcome message?',0
     5 00000023 74696D657320746F20-
     5 0000002C 726570656174207765-
     5 00000035 6C636F6D65206D6573-
     5 0000003E 736167653F00       
     6 00000044 2074696D65733F2028-     confirm_msg2 db ' times? (Y/n)',0
     6 0000004D 592F6E2900         
     7 00000052 526570656174207765-     confirm_msg1 db 'Repeat welcome message',0
     7 0000005B 6C636F6D65206D6573-
     7 00000064 7361676500         
     8 00000069 57656C636F6D652074-     welcome_msg db 'Welcome to Assembly Language Programming ',0
     8 00000072 6F20417373656D626C-
     8 0000007B 79204C616E67756167-
     8 00000084 652050726F6772616D-
     8 0000008D 6D696E672000       
     9                                  
    10                                  .UDATA
    10                              <1>  segment .bss
    11 00000000 <res 00000010>          user_name resb 16
    12 00000010 <res 00000001>          response resb 1
    13                                  
    14                                  .CODE
    14                              <1>  segment .data
    14                              <1>  segment .bss
    14                              <1>  segment .text
    15                                    .STARTUP
    15                              <1> 
    15                              <1>  global _start
    15                              <1> _start:
    16                                    PutStr name_msg
    16 00000000 51                  <1>  push ECX
    16 00000001 B9[00000000]        <1>  mov ECX,%1
    16 00000006 E8(00000000)        <1>  call proc_PutStr
    16 0000000B 59                  <1>  pop ECX
    17                                    GetStr user_name,16
    17 0000000C 56                  <1>  push ESI
    17 0000000D 57                  <1>  push EDI
    17 0000000E BF[00000000]        <1>  mov EDI,%1
    17 00000013 BE10000000          <1>  mov ESI,%2
    17 00000018 E8(00000000)        <1>  call proc_GetStr
    17 0000001D 5F                  <1>  pop EDI
    17 0000001E 5E                  <1>  pop ESI
    18                                  
    19                                  ask_count:
    20                                    PutStr query_msg
    20 0000001F 51                  <1>  push ECX
    20 00000020 B9[1A000000]        <1>  mov ECX,%1
    20 00000025 E8(00000000)        <1>  call proc_PutStr
    20 0000002A 59                  <1>  pop ECX
    21                                    GetInt CX             ;CX is used as the loop counter in the io.mac macro file.
    21                              <1> %ifnidni %1,AX
    21 0000002B 6650                <1>  push AX
    21 0000002D E8(00000000)        <1>  call proc_GetInt
    21 00000032 6689C1              <1>  mov %1,AX
    21 00000035 6658                <1>  pop AX
    21                              <1> %else
    21                              <1>  call proc_GetInt
    21                              <1> %endif
    22                                    PutStr confirm_msg1
    22 00000037 51                  <1>  push ECX
    22 00000038 B9[52000000]        <1>  mov ECX,%1
    22 0000003D E8(00000000)        <1>  call proc_PutStr
    22 00000042 59                  <1>  pop ECX
    23                                    PutInt CX
    23 00000043 6650                <1>  push AX
    23 00000045 6689C8              <1>  mov AX,%1
    23 00000048 E8(00000000)        <1>  call proc_PutInt
    23 0000004D 6658                <1>  pop AX
    24                                    PutStr confirm_msg2
    24 0000004F 51                  <1>  push ECX
    24 00000050 B9[44000000]        <1>  mov ECX,%1
    24 00000055 E8(00000000)        <1>  call proc_PutStr
    24 0000005A 59                  <1>  pop ECX
    25                                    GetCh [response]
    25 0000005B 6656                <1>  push SI
    25 0000005D 6631F6              <1>  xor SI,SI
    25                              <1> %ifidni %1,AL
    25                              <1> 
    25                              <1>  call proc_GetCh
    25                              <1> %elifidni %1,AH
    25                              <1>  mov SI,1
    25                              <1>  call proc_GetCh
    25                              <1> %else
    25 00000060 6650                <1>  push AX
    25 00000062 E8(00000000)        <1>  call proc_GetCh
    25 00000067 A2[10000000]        <1>  mov %1,AL
    25 0000006C 6658                <1>  pop AX
    25                              <1> %endif
    25 0000006E 665E                <1>  pop SI
    26 00000070 803D[10000000]59          cmp byte [response],'Y'
    27 00000077 75A6                      jne ask_count
    28                                  
    29                                  display_msg:
    30                                    PutStr welcome_msg
    30 00000079 51                  <1>  push ECX
    30 0000007A B9[69000000]        <1>  mov ECX,%1
    30 0000007F E8(00000000)        <1>  call proc_PutStr
    30 00000084 59                  <1>  pop ECX
    31                                    PutStr user_name
    31 00000085 51                  <1>  push ECX
    31 00000086 B9[00000000]        <1>  mov ECX,%1
    31 0000008B E8(00000000)        <1>  call proc_PutStr
    31 00000090 59                  <1>  pop ECX
    32                                    nwln
    32 00000091 E8(00000000)        <1>  call proc_nwln
    33 00000096 E2E1                      loop display_msg
    34                                    .EXIT
    34 00000098 B801000000          <1>  mov EAX,1
    34 0000009D 31DB                <1>  xor EBX,EBX
    34 0000009F CD80                <1>  int 0x80
